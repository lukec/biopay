#!/usr/bin/env perl
use 5.14.1;
use Dancer qw/:syntax/;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Dancer::Plugin::Email;
use Biopay::Cardlock;
use Biopay::Member;
use Biopay::Util qw/email_admin email_board random_pin host/;
use Biopay::Daemon;
use AnyEvent;
use Math::Round qw/round/;
use Try::Tiny;
use Data::Dumper;

# Desired behaviour for the cardlock connector
# * Check the pump every 10s
# * Check the couch for cardlock jobs continuously + every hour
# * Check for unpaid transactions every 10 minutes

my $cardlock = Biopay::Cardlock->new;
my $daemon = Biopay::Daemon->new(
    name => 'cardlock-connector',
    want_stream => 1,
    job_handlers => {
        freeze => sub { 
            my ($job, $member) = @_;
            cardlock_freeze($member, 1, $job);
        },
        unfreeze => sub {
            my ($job, $member) = @_;
            cardlock_unfreeze($member, 1, $job);
        },
        change_PIN => sub {
            my ($job, $member) = @_;
            my $mid = $job->args->{member_id} || $member->id;
            $cardlock->set_PIN($mid, $job->args->{new_PIN});
        },
    },
);

my $cardlock_timer = AnyEvent->timer(
    after => 0.5, interval => 10,
    cb    => \&check_cardlock,
);
my $stdin; $stdin = AnyEvent->io(
    fh => *STDIN,
    poll => 'r',
    cb => sub {
        my $key = <STDIN>;
        unless (defined $key) {
            $stdin = undef;
            return;
        }
        chomp $key;
        given ($key) {
            when (m/^X(\d+)/) {
                $cardlock->set_mark($1) if $1;
            }
        }
    },
);

$daemon->run;
exit;

my %txn_start;
sub check_cardlock {
    print 'C';
    return unless $cardlock->exists;
    my $records = $cardlock->recent_transactions;
    for my $txn_hash (@$records) {
        my $id = $txn_hash->{_id};
        autovivify_member($txn_hash->{member_id});

        # Add pricing info to the txn object
        my $p = $daemon->prices->fuel_price;
        $txn_hash->{price_per_litre} = $p;
        $txn_hash->{price} = sprintf '%01.2f',
                                round($txn_hash->{litres} * $p * 100) / 100;
        $txn_hash->{paid} = $txn_hash->{price} eq '0.00' ? 1 : 0;
        
        # Recycling Alternative (Member #1 pays themself directly.)
        $txn_hash->{paid} = 1 if $txn_hash->{member_id} == 1;

        # It may exist already, so we should expect this to fail
        $daemon->couch->save_doc($txn_hash)->cb(
            sub {
                my $cv = shift;
                try { $cv->recv }
                catch {
                    return double_check_transaction($txn_hash) if $_ =~ m/^409/;
                    # Try saving again
                    $daemon->couch->save_doc($txn_hash, {
                            error => sub {
                                my ($headers, $resp) = @_;
                                email_admin("Failed to save txn $id",
                                    "I tried to save txn $id for $txn_hash->{price} twice but failed.\n\n"
                                    . "$headers->{Status} - $headers->{Reason} - $headers->{URL}\n\n"
                                    . $resp);
                            }
                        }
                    );
                }
            }
        );
    }
}

my %double_checked_out;
sub double_check_transaction {
    my $txn = shift;
    my $id  = $txn->{_id};
    return if $double_checked_out{$id};
    print " (DoubleCheck $id) ";

    $daemon->couch->open_doc($id)->cb( sub {
            my $cv = shift;
            try {
                my $doc = $cv->recv;
                if ($doc->{litres} != $txn->{litres}) {
                    if ($doc->{paid}) {
                        return email_admin(
                            "Paid transaction had incorrect litres",
                            <<EOT);
It looks like transaction $doc->{_id} has been paid already, but the reading
has changed on the pump.

The pump says: $txn->{litres}L but this transaction was for $doc->{litres}L
EOT
                    }
                    print " (!!Fixing $id: $doc->{litres} => "
                        . "$txn->{litres}!!) ";
                    $txn->{_rev} = $doc->{_rev};
                    $daemon->couch->save_doc($txn)->cb( sub {
                            my $cv = shift;
                            try { $cv->recv }
                            catch {
                                delete $double_checked_out{$id};
                                email_admin(
                                    "Failed to update txn $id", <<EOT);
I noticed transaction $id had the wrong litres, but I failed to
update it!

I'm trying to update from $doc->{litres} litres to $txn->{litres} litres.

$_
EOT

                            };
                        }
                    );
                }
                my $txn_age = time() - $txn->{epoch_time};
                if ($txn_age > 60*20) {
                    # This transaction is 20 minutes old,
                    # so we can ass_u_me that it's price
                    # won't change further.
                    $double_checked_out{$id}++;
                }
            }
            catch {
                email_admin("Failed to double check $id", $_);
            };
        }
    );
}


sub cardlock_freeze {
    my $member = shift;
    my $save = shift;
    my $job = shift;
    my $mid = $member->id;
    my $pin = $cardlock->fetch_PIN($mid);
    $cardlock->set_PIN($mid, 0);
    unless ($job and $job->args->{forget_pin}) {
        $member->PIN($pin);
        $member->save( error_cb => sub {
                email_admin("Failed to save member PIN after freeze",
                    "I froze member $mid but could not save their PIN "
                    . "($pin) back to the couch.\n\n" . shift) } ) if $save;
    }
}

sub cardlock_unfreeze {
    my $member = shift;
    my $save   = shift;
    my $mid = $member->id;
    if ($member->PIN) {
        $cardlock->set_PIN($mid, $member->PIN);
        $member->PIN(undef);
        $member->save( error_cb => sub {
            email_admin("Failed to clear member PIN after unfreeze",
                "I un-froze member $mid but could not clear their "
                . "PIN.\n\n" . shift) } ) if $save;
    }
    else {
        my $random_pin = random_pin();
        try {
            $cardlock->set_PIN($mid, $random_pin);
            if ($member->email) {
                $member->send_new_pin_email($random_pin);
            }
            else {
                email_admin(
                    "Reset member PIN after un-freeze",
                    "I un-froze member ID " . $member->id . " ("
                    . $member->name . ") but had to make a random PIN.\n"
                    . "I couldn't email them their new PIN.  The new PIN is "
                    . "$random_pin.\n\n"
                    . ($member->phone_num 
                        ? "Their phone number is " . $member->phone_num . "."
                        : "They have no phone number. :(")
                );
            }
        }
        catch {
            email_admin("Failed to send reset PIN email to member",
                "I tried to send an email to member " . $member->id
                . " about their reset PIN to $random_pin, but this failed: $_"
            );
        };
    }
}

my %seen_members;
sub autovivify_member {
    my $member_id = shift;
    return if $seen_members{$member_id}++;
    Biopay::Member->Create(
        member_id => $member_id,
        success_cb => sub {
            try {
                print " (Created member $member_id) ";
            }
            catch {
                print " (Failed to create member $member_id - $_) ";
            }
        },
        error_cb => sub {
            my $err = shift;
            if ($err !~ m/^409/) { #ignore 409 conflicts
                print " (Failed to create member $member_id!!!) ";
            }
        },
    );
}

sub usage {
    die <<EOT;
USAGE: $0 [--no-cardlock]

 --no-cardlock  - do not read from the cardlock.
EOT
}

