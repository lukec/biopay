#!/usr/bin/env perl
use 5.14.1;
use Dancer qw/:syntax/;
use Dancer::Plugin::Email;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Biopay::Daemon;
use Biopay::Member;
use Biopay::Receipt;
use Biopay::EmailReceipt;
use Biopay::Transaction;
use Biopay::Util qw/email_admin email_board host/;
use Try::Tiny;
use List::Util qw/sum/;

my $daemon = Biopay::Daemon->new(
    name => 'job-runner',
    want_stream => 1,
    job_handlers => {
        'send-email' => sub {
            my $args = shift->args->{msg};
            print " (Sending '$args->{subject}' email to $args->{to}) ";
            email {
                from => config->{email_from},
                %$args,
            };
        },
        'email-all-members' => sub {
            my ($job, $member) = @_;
            email_all_members($job->args);
        },
        'send-receipt' => sub {
            my ($job, $member) = @_;
            print " (Receipt to @{[$member->id]} - @{[$member->name]}) ";
            # Shell out so we can avoid AE-style programming of the
            # receipt code
            system($^X, "$FindBin::Bin/send-receipt", $job->_id)
                and die "Could not send receipt for job " . $job->_id;
        },
        'register-member' => sub {
            my ($job, $member) = @_;
            register_member($member, $job->args->{PIN});
        },
    },
    CVs => [
        AnyEvent->timer(
            after => 2.0, interval => 600,
            cb => \&check_for_unpaid_txns,
        ),
    ],
    update_handlers => {
        qr/^(member|txn):/ =>\&check_for_unpaid_txns,
    }
);

$daemon->run;
exit;

sub email_all_members {
    my $args = shift;
    my $subj = $args->{subj} || die "send_email: subj is not defined!";
    my $body = $args->{body} || die "send_email: body is not defined!";

    Biopay::Member->All(
        sub {
            my $members = shift;
            my %emails = map { $_ => 1 } 
                            grep { length } grep { defined }
                                map { $_->email }
                                    grep { $_->active and !$_->email_optout }
                                        @$members;
            print " (Sending '$subj' to: ";
            for my $email (keys %emails) {
                email {
                    to => $email,
                    from => config->{email_from},
                    subject => $subj,
                    type => 'html',
                    message => $body,
                };
                print "$email ";
            }
            print ") ";
        }
    );
    print "Emailing the board. ";
    email {
        to => config->{board_email},
        from => config->{email_from},
        subject => $subj,
        type => 'html',
        message => $body,
    };
}

sub register_member {
    my $member = shift;
    my $PIN    = shift;
    my $email = $member->email;

    my $signup_price = $daemon->prices->signup_price;
    try {
        print " (Register: $email) ";
        # Process sign-up fee
        my $order_num = 'signup:' . $member->id;
        $daemon->processor->process(
            order_num => $order_num,
            amount => $signup_price,
            hash => $member->payment_hash,
        );
        Biopay::Receipt->Create(
            member_id => $member->id,
            order_num => $order_num,
            amount    => $signup_price,
            items     => [
                {
                    amount => $signup_price, type => 'signup',
                    desc => 'Signup'
                }
            ]
        );
        
        # Activate Cardlock
        Biopay::Command->Create(
            command => 'change_PIN',
            member_id => $member->id,
            new_PIN => $PIN,
            on_error => sub {
                email_admin("Failed to create change_PIN job",
                    "Member_id: @{[$member->id]} PIN:$PIN\n\nError: $_");
            }
        );
        $member->send_welcome_email($PIN);

        email_board("New member - " . $member->id,
            "Hello Board, we just had a new member join the co-op: "
            . $member->name . ".\n\n"
            . "Details: " . host() . "/members/" . $member->id . "\n");
    };
    catch {
        my $err = "Failed to register new member: $_";
        debug $err;
        email_admin("Error registering new member $email", "Error: $err");
    };
}

sub check_for_unpaid_txns {
    state $last_check = 0;
    my $time_since_last_check = time() - $last_check;
    if ($time_since_last_check < 15) {
        return;
    }
    $last_check = time();
    print 'U';
    Biopay::Transaction->All_unpaid(
        sub {
            my $txns = shift;
            my %member;
            my %member_total;
            for my $txn (@$txns) {
                push @{ $member{$txn->member_id} }, $txn;
                $member_total{$txn->member_id} += $txn->price;
            }

            for my $mid (keys %member) {
                if ($member_total{$mid} < 5) {
                    # print " (Member $mid has < \$5, skipping) ";
                    next;
                }
                my $txns = $member{$mid};
                Biopay::Member->By_id($mid, sub {
                        my $member = shift;
                        unless ($member) {
                            print " (No member $mid found) ";
                            return;
                        }
                        if (my $hash = $member->payment_hash) {
                            process_transactions($member, $txns)
                                unless $member->billing_error;
                        }
                        else {
                            print 'u';
                        }
                    },
                );
            }
        }
    );
}

sub process_transactions {
    my $member = shift;
    my $txns   = shift;
    return unless @$txns;
    my $total = sum map { $_->price } @$txns;
    print ' (Bio-' . $member->id . ":\$$total) ";
    my $items = [
        map { { amount => $_->price, type => 'txn', desc => $_->txn_id } }
            @$txns
    ];

    my $order_num = @$txns > 1 
        ? sprintf("%d-txns-%d", @$txns+0, time)
        : "txn-" . $txns->[0]->txn_id;

    my $need_to_renew_membership = $member->membership_is_expired;
    my $membership_price = $daemon->prices->annual_membership_price;
    if ($need_to_renew_membership) {
        $total += $membership_price;
        push @$items, {
            amount => $membership_price,
            type   => 'dues',
            desc   => 'Membership Dues',
        };
    }

    my $error = "Order '$order_num' not yet processed.";
    try {
        try {
            $daemon->processor->process(
                order_num => $order_num,
                amount => $total,
                hash => $member->payment_hash,
            );
            Biopay::Receipt->Create(
                member_id => $member->id,
                order_num => $order_num,
                amount    => $total,
                items     => $items,
            );

            # Update the member, if necessary
            if ($need_to_renew_membership) {
                $member->renew_membership(
                    success_cb => sub {
                        print ' (Renewed membership for: ' . $member->id . ') ';
                        unfreeze_member($member) if $member->frozen;
                    },
                    error_cb => sub {
                        my $save_err = shift;
                        email_admin("Failed to renew membership",
                            "I tried to renew member " . $member->id
                            . "'s dues, but the save failed: $save_err");
                        unfreeze_member($member) if $member->frozen;
                    },
                );
            }
            else {
                unfreeze_member($member) if $member->frozen;
            }
        }
        catch {
            my $err = $_;
            # There was an error processing payment for this member. Set their
            # billing_error flag, so that we don't retry until it is cleared
            $member->billing_error($err);
            $member->frozen(1);
            create_freeze_job($member, 'freeze');
            $member->save(
                success_cb => sub {
                    print ' (Freeze:' . $member->id . ') ';
                },
                error_cb => sub {
                    my $save_err = shift;
                    email_admin("Failed to set billing_error for member",
                        "I tried to mark member " . $member->id . " with a "
                        . "billing error for order '$order_num' but failed."
                        . "\nSave error was: $save_err"
                        . "\nPayment error was: $err");
                },
            );
            $member->send_billing_error_email($err, $total);

            # Re-raise error so that it is reported properly.
            die $err;
        };

        $error = "Order '$order_num' processed but txns not marked as paid.";
        for my $txn (@$txns) {
            print " (Marking " . $txn->id . " as paid) ";
            $txn->paid(1);
            $txn->save(
                error_cb => sub {
                    my $err = shift;
                    email_admin("Failed to mark txn:" . $txn->id . " as paid!",
                        "I was trying to mark it as paid after successfully "
                        . " processing order $order_num for \$$total\n\n$err"
                    );
                }
            );
        }
        $error = "Order '$order_num' processed, txns marked as paid, but "
                . "receipt is not sent.";
            
        Biopay::EmailReceipt->new(
            member_id => $member->id,
            member => $member,
            txns => $txns,
            ($need_to_renew_membership ? (dues => $membership_price) : ())
        )->send;
        print " (Receipt to: " . $member->email . ") " if $member->email;
    }
    catch {
        my $err = $_;
        error $err;

        email_admin("Error processing payment $order_num",
            "Had a problem during payment processing: $error\n\n$err\n\n"
            . "This payment was for member ID " . $member->id
            . " (" . host() . '/members/' . $member->id . ') '
            . " for transactions: " . join(', ', map { host() . '/txns/' . $_->id } @$txns)
        );
    }
}

sub create_freeze_job {
    my $member = shift;
    my $type = shift;
    Biopay::Command->Create(
        command => $type,
        member_id => $member->id,
        on_error => sub {
            my $err = shift;
            email_admin("Failed to $type @{[$member->id]}",
                "I failed to create a $type job for $member->id.\n\n"
                . "Error: $err");
        },
    );
}

sub unfreeze_member {
    my $member = shift;
    $member->frozen(0);
    create_freeze_job($member, 'unfreeze');

    $member->save(
        success_cb => sub {
            print ' (Un-freeze:' . $member->id . ') ';
        },
        error_cb => sub {
            my $err = shift;
            email_admin("Failed to un-freeze member",
                "I tried to un-freeze member " . $member->id
                . " after a successful payment, but saving failed."
                . "\nError was: $err");
        },
    );
}

